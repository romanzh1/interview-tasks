// Code generated by http://github.com/gojuno/minimock (v3.3.12). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/cart/internal/service.lomsClient -o loms_client_mock.go -n LomsClientMock -p mocks

import (
	"context"
	"route256/cart/pkg/loms"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// LomsClientMock implements service.lomsClient
type LomsClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateOrder          func(ctx context.Context, userID int64, items []loms.OrderItem) (i1 int64, err error)
	inspectFuncCreateOrder   func(ctx context.Context, userID int64, items []loms.OrderItem)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mLomsClientMockCreateOrder

	funcGetStockInfo          func(ctx context.Context, sku uint32) (u1 uint64, err error)
	inspectFuncGetStockInfo   func(ctx context.Context, sku uint32)
	afterGetStockInfoCounter  uint64
	beforeGetStockInfoCounter uint64
	GetStockInfoMock          mLomsClientMockGetStockInfo
}

// NewLomsClientMock returns a mock for service.lomsClient
func NewLomsClientMock(t minimock.Tester) *LomsClientMock {
	m := &LomsClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mLomsClientMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*LomsClientMockCreateOrderParams{}

	m.GetStockInfoMock = mLomsClientMockGetStockInfo{mock: m}
	m.GetStockInfoMock.callArgs = []*LomsClientMockGetStockInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLomsClientMockCreateOrder struct {
	optional           bool
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockCreateOrderExpectation
	expectations       []*LomsClientMockCreateOrderExpectation

	callArgs []*LomsClientMockCreateOrderParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// LomsClientMockCreateOrderExpectation specifies expectation struct of the lomsClient.CreateOrder
type LomsClientMockCreateOrderExpectation struct {
	mock      *LomsClientMock
	params    *LomsClientMockCreateOrderParams
	paramPtrs *LomsClientMockCreateOrderParamPtrs
	results   *LomsClientMockCreateOrderResults
	Counter   uint64
}

// LomsClientMockCreateOrderParams contains parameters of the lomsClient.CreateOrder
type LomsClientMockCreateOrderParams struct {
	ctx    context.Context
	userID int64
	items  []loms.OrderItem
}

// LomsClientMockCreateOrderParamPtrs contains pointers to parameters of the lomsClient.CreateOrder
type LomsClientMockCreateOrderParamPtrs struct {
	ctx    *context.Context
	userID *int64
	items  *[]loms.OrderItem
}

// LomsClientMockCreateOrderResults contains results of the lomsClient.CreateOrder
type LomsClientMockCreateOrderResults struct {
	i1  int64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateOrder *mLomsClientMockCreateOrder) Optional() *mLomsClientMockCreateOrder {
	mmCreateOrder.optional = true
	return mmCreateOrder
}

// Expect sets up expected params for lomsClient.CreateOrder
func (mmCreateOrder *mLomsClientMockCreateOrder) Expect(ctx context.Context, userID int64, items []loms.OrderItem) *mLomsClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsClientMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.paramPtrs != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by ExpectParams functions")
	}

	mmCreateOrder.defaultExpectation.params = &LomsClientMockCreateOrderParams{ctx, userID, items}
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// ExpectCtxParam1 sets up expected param ctx for lomsClient.CreateOrder
func (mmCreateOrder *mLomsClientMockCreateOrder) ExpectCtxParam1(ctx context.Context) *mLomsClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsClientMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LomsClientMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateOrder
}

// ExpectUserIDParam2 sets up expected param userID for lomsClient.CreateOrder
func (mmCreateOrder *mLomsClientMockCreateOrder) ExpectUserIDParam2(userID int64) *mLomsClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsClientMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LomsClientMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.userID = &userID

	return mmCreateOrder
}

// ExpectItemsParam3 sets up expected param items for lomsClient.CreateOrder
func (mmCreateOrder *mLomsClientMockCreateOrder) ExpectItemsParam3(items []loms.OrderItem) *mLomsClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsClientMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LomsClientMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.items = &items

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the lomsClient.CreateOrder
func (mmCreateOrder *mLomsClientMockCreateOrder) Inspect(f func(ctx context.Context, userID int64, items []loms.OrderItem)) *mLomsClientMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for LomsClientMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by lomsClient.CreateOrder
func (mmCreateOrder *mLomsClientMockCreateOrder) Return(i1 int64, err error) *LomsClientMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsClientMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &LomsClientMockCreateOrderResults{i1, err}
	return mmCreateOrder.mock
}

// Set uses given function f to mock the lomsClient.CreateOrder method
func (mmCreateOrder *mLomsClientMockCreateOrder) Set(f func(ctx context.Context, userID int64, items []loms.OrderItem) (i1 int64, err error)) *LomsClientMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the lomsClient.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the lomsClient.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	return mmCreateOrder.mock
}

// When sets expectation for the lomsClient.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mLomsClientMockCreateOrder) When(ctx context.Context, userID int64, items []loms.OrderItem) *LomsClientMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Set")
	}

	expectation := &LomsClientMockCreateOrderExpectation{
		mock:   mmCreateOrder.mock,
		params: &LomsClientMockCreateOrderParams{ctx, userID, items},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up lomsClient.CreateOrder return parameters for the expectation previously defined by the When method
func (e *LomsClientMockCreateOrderExpectation) Then(i1 int64, err error) *LomsClientMock {
	e.results = &LomsClientMockCreateOrderResults{i1, err}
	return e.mock
}

// Times sets number of times lomsClient.CreateOrder should be invoked
func (mmCreateOrder *mLomsClientMockCreateOrder) Times(n uint64) *mLomsClientMockCreateOrder {
	if n == 0 {
		mmCreateOrder.mock.t.Fatalf("Times of LomsClientMock.CreateOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateOrder.expectedInvocations, n)
	return mmCreateOrder
}

func (mmCreateOrder *mLomsClientMockCreateOrder) invocationsDone() bool {
	if len(mmCreateOrder.expectations) == 0 && mmCreateOrder.defaultExpectation == nil && mmCreateOrder.mock.funcCreateOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateOrder.mock.afterCreateOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateOrder implements service.lomsClient
func (mmCreateOrder *LomsClientMock) CreateOrder(ctx context.Context, userID int64, items []loms.OrderItem) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, userID, items)
	}

	mm_params := LomsClientMockCreateOrderParams{ctx, userID, items}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, &mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_want_ptrs := mmCreateOrder.CreateOrderMock.defaultExpectation.paramPtrs

		mm_got := LomsClientMockCreateOrderParams{ctx, userID, items}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateOrder.t.Errorf("LomsClientMock.CreateOrder got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmCreateOrder.t.Errorf("LomsClientMock.CreateOrder got unexpected parameter userID, want: %#v, got: %#v%s\n", *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

			if mm_want_ptrs.items != nil && !minimock.Equal(*mm_want_ptrs.items, mm_got.items) {
				mmCreateOrder.t.Errorf("LomsClientMock.CreateOrder got unexpected parameter items, want: %#v, got: %#v%s\n", *mm_want_ptrs.items, mm_got.items, minimock.Diff(*mm_want_ptrs.items, mm_got.items))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("LomsClientMock.CreateOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the LomsClientMock.CreateOrder")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, userID, items)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to LomsClientMock.CreateOrder. %v %v %v", ctx, userID, items)
	return
}

// CreateOrderAfterCounter returns a count of finished LomsClientMock.CreateOrder invocations
func (mmCreateOrder *LomsClientMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of LomsClientMock.CreateOrder invocations
func (mmCreateOrder *LomsClientMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mLomsClientMockCreateOrder) Calls() []*LomsClientMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*LomsClientMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockCreateOrderDone() bool {
	if m.CreateOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateOrderMock.invocationsDone()
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *LomsClientMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.CreateOrder with params: %#v", *e.params)
		}
	}

	afterCreateOrderCounter := mm_atomic.LoadUint64(&m.afterCreateOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && afterCreateOrderCounter < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.CreateOrder")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.CreateOrder with params: %#v", *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && afterCreateOrderCounter < 1 {
		m.t.Error("Expected call to LomsClientMock.CreateOrder")
	}

	if !m.CreateOrderMock.invocationsDone() && afterCreateOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsClientMock.CreateOrder but found %d calls",
			mm_atomic.LoadUint64(&m.CreateOrderMock.expectedInvocations), afterCreateOrderCounter)
	}
}

type mLomsClientMockGetStockInfo struct {
	optional           bool
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockGetStockInfoExpectation
	expectations       []*LomsClientMockGetStockInfoExpectation

	callArgs []*LomsClientMockGetStockInfoParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// LomsClientMockGetStockInfoExpectation specifies expectation struct of the lomsClient.GetStockInfo
type LomsClientMockGetStockInfoExpectation struct {
	mock      *LomsClientMock
	params    *LomsClientMockGetStockInfoParams
	paramPtrs *LomsClientMockGetStockInfoParamPtrs
	results   *LomsClientMockGetStockInfoResults
	Counter   uint64
}

// LomsClientMockGetStockInfoParams contains parameters of the lomsClient.GetStockInfo
type LomsClientMockGetStockInfoParams struct {
	ctx context.Context
	sku uint32
}

// LomsClientMockGetStockInfoParamPtrs contains pointers to parameters of the lomsClient.GetStockInfo
type LomsClientMockGetStockInfoParamPtrs struct {
	ctx *context.Context
	sku *uint32
}

// LomsClientMockGetStockInfoResults contains results of the lomsClient.GetStockInfo
type LomsClientMockGetStockInfoResults struct {
	u1  uint64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetStockInfo *mLomsClientMockGetStockInfo) Optional() *mLomsClientMockGetStockInfo {
	mmGetStockInfo.optional = true
	return mmGetStockInfo
}

// Expect sets up expected params for lomsClient.GetStockInfo
func (mmGetStockInfo *mLomsClientMockGetStockInfo) Expect(ctx context.Context, sku uint32) *mLomsClientMockGetStockInfo {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsClientMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LomsClientMockGetStockInfoExpectation{}
	}

	if mmGetStockInfo.defaultExpectation.paramPtrs != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsClientMock.GetStockInfo mock is already set by ExpectParams functions")
	}

	mmGetStockInfo.defaultExpectation.params = &LomsClientMockGetStockInfoParams{ctx, sku}
	for _, e := range mmGetStockInfo.expectations {
		if minimock.Equal(e.params, mmGetStockInfo.defaultExpectation.params) {
			mmGetStockInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStockInfo.defaultExpectation.params)
		}
	}

	return mmGetStockInfo
}

// ExpectCtxParam1 sets up expected param ctx for lomsClient.GetStockInfo
func (mmGetStockInfo *mLomsClientMockGetStockInfo) ExpectCtxParam1(ctx context.Context) *mLomsClientMockGetStockInfo {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsClientMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LomsClientMockGetStockInfoExpectation{}
	}

	if mmGetStockInfo.defaultExpectation.params != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsClientMock.GetStockInfo mock is already set by Expect")
	}

	if mmGetStockInfo.defaultExpectation.paramPtrs == nil {
		mmGetStockInfo.defaultExpectation.paramPtrs = &LomsClientMockGetStockInfoParamPtrs{}
	}
	mmGetStockInfo.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetStockInfo
}

// ExpectSkuParam2 sets up expected param sku for lomsClient.GetStockInfo
func (mmGetStockInfo *mLomsClientMockGetStockInfo) ExpectSkuParam2(sku uint32) *mLomsClientMockGetStockInfo {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsClientMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LomsClientMockGetStockInfoExpectation{}
	}

	if mmGetStockInfo.defaultExpectation.params != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsClientMock.GetStockInfo mock is already set by Expect")
	}

	if mmGetStockInfo.defaultExpectation.paramPtrs == nil {
		mmGetStockInfo.defaultExpectation.paramPtrs = &LomsClientMockGetStockInfoParamPtrs{}
	}
	mmGetStockInfo.defaultExpectation.paramPtrs.sku = &sku

	return mmGetStockInfo
}

// Inspect accepts an inspector function that has same arguments as the lomsClient.GetStockInfo
func (mmGetStockInfo *mLomsClientMockGetStockInfo) Inspect(f func(ctx context.Context, sku uint32)) *mLomsClientMockGetStockInfo {
	if mmGetStockInfo.mock.inspectFuncGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("Inspect function is already set for LomsClientMock.GetStockInfo")
	}

	mmGetStockInfo.mock.inspectFuncGetStockInfo = f

	return mmGetStockInfo
}

// Return sets up results that will be returned by lomsClient.GetStockInfo
func (mmGetStockInfo *mLomsClientMockGetStockInfo) Return(u1 uint64, err error) *LomsClientMock {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsClientMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LomsClientMockGetStockInfoExpectation{mock: mmGetStockInfo.mock}
	}
	mmGetStockInfo.defaultExpectation.results = &LomsClientMockGetStockInfoResults{u1, err}
	return mmGetStockInfo.mock
}

// Set uses given function f to mock the lomsClient.GetStockInfo method
func (mmGetStockInfo *mLomsClientMockGetStockInfo) Set(f func(ctx context.Context, sku uint32) (u1 uint64, err error)) *LomsClientMock {
	if mmGetStockInfo.defaultExpectation != nil {
		mmGetStockInfo.mock.t.Fatalf("Default expectation is already set for the lomsClient.GetStockInfo method")
	}

	if len(mmGetStockInfo.expectations) > 0 {
		mmGetStockInfo.mock.t.Fatalf("Some expectations are already set for the lomsClient.GetStockInfo method")
	}

	mmGetStockInfo.mock.funcGetStockInfo = f
	return mmGetStockInfo.mock
}

// When sets expectation for the lomsClient.GetStockInfo which will trigger the result defined by the following
// Then helper
func (mmGetStockInfo *mLomsClientMockGetStockInfo) When(ctx context.Context, sku uint32) *LomsClientMockGetStockInfoExpectation {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsClientMock.GetStockInfo mock is already set by Set")
	}

	expectation := &LomsClientMockGetStockInfoExpectation{
		mock:   mmGetStockInfo.mock,
		params: &LomsClientMockGetStockInfoParams{ctx, sku},
	}
	mmGetStockInfo.expectations = append(mmGetStockInfo.expectations, expectation)
	return expectation
}

// Then sets up lomsClient.GetStockInfo return parameters for the expectation previously defined by the When method
func (e *LomsClientMockGetStockInfoExpectation) Then(u1 uint64, err error) *LomsClientMock {
	e.results = &LomsClientMockGetStockInfoResults{u1, err}
	return e.mock
}

// Times sets number of times lomsClient.GetStockInfo should be invoked
func (mmGetStockInfo *mLomsClientMockGetStockInfo) Times(n uint64) *mLomsClientMockGetStockInfo {
	if n == 0 {
		mmGetStockInfo.mock.t.Fatalf("Times of LomsClientMock.GetStockInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetStockInfo.expectedInvocations, n)
	return mmGetStockInfo
}

func (mmGetStockInfo *mLomsClientMockGetStockInfo) invocationsDone() bool {
	if len(mmGetStockInfo.expectations) == 0 && mmGetStockInfo.defaultExpectation == nil && mmGetStockInfo.mock.funcGetStockInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetStockInfo.mock.afterGetStockInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetStockInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetStockInfo implements service.lomsClient
func (mmGetStockInfo *LomsClientMock) GetStockInfo(ctx context.Context, sku uint32) (u1 uint64, err error) {
	mm_atomic.AddUint64(&mmGetStockInfo.beforeGetStockInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStockInfo.afterGetStockInfoCounter, 1)

	if mmGetStockInfo.inspectFuncGetStockInfo != nil {
		mmGetStockInfo.inspectFuncGetStockInfo(ctx, sku)
	}

	mm_params := LomsClientMockGetStockInfoParams{ctx, sku}

	// Record call args
	mmGetStockInfo.GetStockInfoMock.mutex.Lock()
	mmGetStockInfo.GetStockInfoMock.callArgs = append(mmGetStockInfo.GetStockInfoMock.callArgs, &mm_params)
	mmGetStockInfo.GetStockInfoMock.mutex.Unlock()

	for _, e := range mmGetStockInfo.GetStockInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmGetStockInfo.GetStockInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStockInfo.GetStockInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStockInfo.GetStockInfoMock.defaultExpectation.params
		mm_want_ptrs := mmGetStockInfo.GetStockInfoMock.defaultExpectation.paramPtrs

		mm_got := LomsClientMockGetStockInfoParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetStockInfo.t.Errorf("LomsClientMock.GetStockInfo got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGetStockInfo.t.Errorf("LomsClientMock.GetStockInfo got unexpected parameter sku, want: %#v, got: %#v%s\n", *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStockInfo.t.Errorf("LomsClientMock.GetStockInfo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStockInfo.GetStockInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStockInfo.t.Fatal("No results are set for the LomsClientMock.GetStockInfo")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmGetStockInfo.funcGetStockInfo != nil {
		return mmGetStockInfo.funcGetStockInfo(ctx, sku)
	}
	mmGetStockInfo.t.Fatalf("Unexpected call to LomsClientMock.GetStockInfo. %v %v", ctx, sku)
	return
}

// GetStockInfoAfterCounter returns a count of finished LomsClientMock.GetStockInfo invocations
func (mmGetStockInfo *LomsClientMock) GetStockInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockInfo.afterGetStockInfoCounter)
}

// GetStockInfoBeforeCounter returns a count of LomsClientMock.GetStockInfo invocations
func (mmGetStockInfo *LomsClientMock) GetStockInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockInfo.beforeGetStockInfoCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.GetStockInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStockInfo *mLomsClientMockGetStockInfo) Calls() []*LomsClientMockGetStockInfoParams {
	mmGetStockInfo.mutex.RLock()

	argCopy := make([]*LomsClientMockGetStockInfoParams, len(mmGetStockInfo.callArgs))
	copy(argCopy, mmGetStockInfo.callArgs)

	mmGetStockInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetStockInfoDone returns true if the count of the GetStockInfo invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockGetStockInfoDone() bool {
	if m.GetStockInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetStockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetStockInfoMock.invocationsDone()
}

// MinimockGetStockInfoInspect logs each unmet expectation
func (m *LomsClientMock) MinimockGetStockInfoInspect() {
	for _, e := range m.GetStockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.GetStockInfo with params: %#v", *e.params)
		}
	}

	afterGetStockInfoCounter := mm_atomic.LoadUint64(&m.afterGetStockInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockInfoMock.defaultExpectation != nil && afterGetStockInfoCounter < 1 {
		if m.GetStockInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.GetStockInfo")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.GetStockInfo with params: %#v", *m.GetStockInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStockInfo != nil && afterGetStockInfoCounter < 1 {
		m.t.Error("Expected call to LomsClientMock.GetStockInfo")
	}

	if !m.GetStockInfoMock.invocationsDone() && afterGetStockInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsClientMock.GetStockInfo but found %d calls",
			mm_atomic.LoadUint64(&m.GetStockInfoMock.expectedInvocations), afterGetStockInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LomsClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateOrderInspect()

			m.MinimockGetStockInfoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LomsClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LomsClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone() &&
		m.MinimockGetStockInfoDone()
}
